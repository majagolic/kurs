package sud;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;


public class Evidencija {
	
	private String nazivSuda = "";
	private String adresaSuda = "";
	private ArrayList<Predmet> spisakPredmeta = new ArrayList<Predmet>();
	
	
	
	public Evidencija() {
		
		this.spisakPredmeta = new ArrayList<>();
		
	}



	public Evidencija(String nazivSuda, String adresaSuda, ArrayList<Predmet> spisakPredmeta) {
	
		this.nazivSuda = nazivSuda;
		this.adresaSuda = adresaSuda;
		this.spisakPredmeta = spisakPredmeta;
	}



	public String getNazivSuda() {
		return nazivSuda;
	}



	public void setNazivSuda(String nazivSuda) {
		this.nazivSuda = nazivSuda;
	}



	public String getAdresaSuda() {
		return adresaSuda;
	}



	public void setAdresaSuda(String adresaSuda) {
		this.adresaSuda = adresaSuda;
	}



	public ArrayList<Predmet> getSpisakPredmeta() {
		return spisakPredmeta;
	}



	public void setSpisakPredmeta(ArrayList<Predmet> spisakPredmeta) {
		this.spisakPredmeta = spisakPredmeta;
	}
	
	
	public boolean dadajPredmet(Predmet noviPredmet) {
		
		for (int i = 0; i < spisakPredmeta.size(); i++) {
			if(noviPredmet.getBroj() == spisakPredmeta.get(i).getBroj()) {
				System.out.println("Predmet vec postoji.");
					return false;
				}
		}
			spisakPredmeta.add(noviPredmet);
			System.out.println("Predmet uspesno dodat.");
			return true;
			
		}
	
	public void ispisNaOsnovuBroja(int brojPredmeta ) {
		
		for (int i = 0; i < spisakPredmeta.size();  i++) {
			if(spisakPredmeta.get(i).getBroj() == brojPredmeta){
				System.out.println(spisakPredmeta.get(i));
			}
			
		}
	}
	
	public void ispisNaOsnovuImena(String imePredmeta) {
		
		for (int i = 0; i < spisakPredmeta.size(); i++) {
			if(spisakPredmeta.get(i).getNaziv() == imePredmeta) {
				System.out.println(spisakPredmeta.get(i));
			}
			
		}
	}
	
	public String dodajTekst(String noviTekst, int brojPredmeta) {
		
		for (int i = 0; i < spisakPredmeta.size();  i++) {
			if(spisakPredmeta.get(i).getBroj() == brojPredmeta){
				String tekstZaDodavanje = spisakPredmeta.get(i).getTekst() + " " + noviTekst;
				spisakPredmeta.get(i).setTekst(tekstZaDodavanje);
				return tekstZaDodavanje;
				}
			}
			return null;
		}
	
	public void ispisPredmetaUOpseguDatuma(LocalDate min, LocalDate max) {
		
		for (int i = 0; i < spisakPredmeta.size(); i++) {
			
			if(spisakPredmeta.get(i).getDatum().compareTo(min) >= 0 && spisakPredmeta.get(i).getDatum().compareTo(max) <= 0){
				System.out.println(spisakPredmeta.get(i));
			}
			
		}
	}
	
	public void save(String path) {
		
		ArrayList<String> lines = new ArrayList<String>();
	
		
		String line1 = this.nazivSuda;
		String line2 = this.adresaSuda;
		
		lines.add(line1);
		lines.add(line2);
		
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd.MM.yyyy.");
		
		for (int i = 0; i < this.spisakPredmeta.size(); i++) {
			
			Predmet temp = spisakPredmeta.get(i);
			
			String line3 = temp.getBroj() + ";" + temp.getNaziv() + ";" + temp.getTekst() + ";" + dtf.format(temp.getDatum());
			lines.add(line3);
			try {
				Files.write(Paths.get(path), lines, Charset.defaultCharset(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE); 
			} catch (IOException e) {
				System.out.println("File " + path + " not found.");
			}
		}
	}
	
	
	public void load(String path) {
		
		this.spisakPredmeta = new ArrayList<>();
		List<String> lines;
		try {
			lines = Files.readAllLines(Paths.get(path), Charset.defaultCharset());
			
			setNazivSuda(lines.get(0));
			setAdresaSuda(lines.get(1));
			
			this.nazivSuda = lines.get(0);
			this.adresaSuda = lines.get(1);
			
			lines.remove(0);
			lines.remove(0);
			
			for (String line: lines) {
				String[] attributes = line.split(";");
			
				int brojPredmeta = Integer.parseInt(attributes[0]); 
				String nazivPredmeta = attributes[1];
				String tekstPredmeta = attributes[2];
				String datumString = attributes[3];
				LocalDate datum = null;
				try {
					datum = LocalDate.parse(datumString, DateTimeFormatter.ofPattern("dd.MM.yyyy."));
				} catch (DateTimeParseException e) {
					System.out.println("Desila se greska pri konverziji stringa u datum.");
				}
	
				Predmet predmet = new Predmet(brojPredmeta, nazivPredmeta, tekstPredmeta, datum);
				
				this.spisakPredmeta.add(predmet);
			}
		} catch (IOException e) {
			System.out.println("File " + path + " not found.");
		}
	}



	@Override
	public String toString() {
		
		String temp = "";
		temp += "Naziv suda: " + this.nazivSuda + "\n";
		temp += "Adresa suda: " + this.adresaSuda + "\n";
		temp += "Spisak predmeta:\n";
		for(int i = 0; i < spisakPredmeta.size(); i++) {
			temp += spisakPredmeta.get(i) + "\n";
		}

		return temp.trim();
	}
}
	
	
		
	
	
	
	
	
	
	
	
	




